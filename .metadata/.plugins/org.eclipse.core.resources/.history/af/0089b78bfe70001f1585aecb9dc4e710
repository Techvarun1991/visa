package com.onehealth.lifestyleandhistory.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.onehealth.lifestyleandhistory.entity.LifeStyle;
import com.onehealth.lifestyleandhistory.exception.RecordNotFoundException;
import com.onehealth.lifestyleandhistory.service.LifeStyleService;

import java.util.List;


//@CrossOrigin("*")

@RestController
@RequestMapping("/lifeStyleAndHistory/lifeStyle")
public class LifeStyleController {

	private static final Logger logger = LoggerFactory.getLogger(LifeStyleController.class);

	@Autowired
	private LifeStyleService lifestyleService;

	/**
	 * Handles a GET request to the root endpoint. Returns a simple greeting
	 * message.
	 *
	 * @return A greeting message.
	 */
	@GetMapping
	public String Hello() {
		logger.info("Received a GET request to root endpoint");
		return "Hello from /lifeStyleAndHistory/lifeStyle/";
	}

	/**
	 * Handles a GET request to retrieve all lifestyles.
	 *
	 * @return A list of all lifestyles along with an appropriate HTTP status.
	 */
	@GetMapping("/all")
	public ResponseEntity<?> getAllLifestyles() {
	    try {
	        logger.info("Received a GET request to retrieve all lifestyles");

	        // Call the service to retrieve all lifestyles
	        List<LifeStyle> lifestyles = lifestyleService.getAllLifeStyles();
	        
	        // Log the number of retrieved lifestyles
	        logger.info("Retrieved {} lifestyles", lifestyles.size());

	        // Return the retrieved lifestyles in the response
	        return new ResponseEntity<>(lifestyles, HttpStatus.OK);
	    } catch (Exception e) {
	        // Log the exception
	        logger.error("An error occurred while retrieving all lifestyles", e);

	        // Return an error response with appropriate message in the body
	        String errorMessage = "Failed to retrieve lifestyles: " + e.getMessage();
	        return ResponseEntity
	                .status(HttpStatus.INTERNAL_SERVER_ERROR)
	                .body(errorMessage);
	    }
	}


	/**
	 * Handles a GET request to retrieve a specific lifestyle by its serial number.
	 *
	 * @param lID The serial number of the lifestyle to retrieve.
	 * @return The retrieved lifestyle along with an appropriate HTTP status.
	 * @throws RecordNotFoundException If the specified lifestyle is not found.
	 */
	
	@GetMapping("/byPatientId/{patientId}")
	public ResponseEntity<?> getLifestyleByPatientId(@PathVariable int patientId) {
	    try {
	        logger.info("Received a GET request to retrieve lifestyle by patientId: {}", patientId);

	        // Call the service to retrieve the lifestyle by patientId
	        LifeStyle lifestyle = lifestyleService.getLifestyleByPatientId(patientId);

	        // Log the retrieved lifestyle
	        logger.info("Retrieved lifestyle: {}", lifestyle);

	        // Return the retrieved lifestyle in the response
	        return new ResponseEntity<>(lifestyle, HttpStatus.OK);
	    } catch (RecordNotFoundException e) {
	        // Log the exception
	        logger.error("Record not found for patientId: {}", patientId);

	        // Return a not found response with appropriate message in the body
	        return ResponseEntity
	                .status(HttpStatus.NOT_FOUND)
	                .body("Record not found for patientId: " + patientId);
	    } catch (Exception e) {
	        // Log the exception
	        logger.error("An error occurred while retrieving lifestyle by patientId: {}", patientId, e);

	        // Return an error response with appropriate message in the body
	        return ResponseEntity
	                .status(HttpStatus.INTERNAL_SERVER_ERROR)
	                .body("Failed to retrieve lifestyle for patientId: " + patientId);
	    }
	}


	@GetMapping("/AllbyUserId/{userId}")
	public ResponseEntity<?> getAllLifestyleByUserId(@PathVariable Long userId) {
	    try {
	        logger.info("Received a GET request to retrieve lifestyles by userId: {}", userId);

	        // Call the service to retrieve lifestyles by userId
	        List<LifeStyle> lifestyles = lifestyleService.getAllLifestyleByUserId(userId);

	        // Log the retrieved lifestyles
	        logger.info("Retrieved lifestyles: {}", lifestyles);

	        // Return the retrieved lifestyles in the response
	        return new ResponseEntity<>(lifestyles, HttpStatus.OK);
	    } catch (Exception e) {
	        // Log the exception
	        logger.error("An error occurred while retrieving lifestyles by userId: {}", userId, e);

	        // Return an error response with appropriate message in the body
	        return ResponseEntity
	                .status(HttpStatus.INTERNAL_SERVER_ERROR)
	                .body("Failed to retrieve lifestyles for userId: " + userId);
	    }
	}


	/**
	 * Handles a POST request to create a new lifestyle.
	 *
	 * @param lifestyle The lifestyle details to be created.
	 * @return A success message along with an appropriate HTTP status.
	 */
	
	@PostMapping
	public ResponseEntity<String> createLifestyle(@RequestBody LifeStyle lifestyle) {
	    try {
	        logger.info("Received a POST request to create a new lifestyle");

	        // Check if a lifestyle record already exists for the given patientId and userId
	        boolean lifestyleExists = lifestyleService.existsByPatientIdAndUserId(lifestyle.getPatientId(), lifestyle.getUserId());
	        System.out.println(lifestyleExists);
	        if (lifestyleExists) {
	            // Return a bad request response with appropriate message in the body
	            return ResponseEntity.badRequest().body("A lifestyle record already exists for this patientId and userId");
	        }

	     // Create the lifestyle record since it doesn't exist and patientId is valid
	        boolean flag = lifestyleService.createLifestyle(lifestyle);
	        if(flag) {
		        // Return a success response with appropriate message in the body
		        return new ResponseEntity<>("LifeStyle Added Successfully", HttpStatus.CREATED);
	        }
	        else {
	        	// Return a success response with appropriate message in the body
		        return new ResponseEntity<>("LifeStyle Added Successfully", HttpStatus.NOT_FOUND);
	        }
	        
	    } catch (Exception e) {
	        // Log the exception
	        logger.error("An error occurred while creating lifestyle", e);

	        // Return an error response with appropriate message in the body
	        return ResponseEntity
	                .status(HttpStatus.INTERNAL_SERVER_ERROR)
	                .body("Failed to create lifestyle: " + e.getMessage());
	    }
	}

	/**
	 * Handles a PUT request to update an existing lifestyle.
	 *
	 * @param lID       The serial number of the lifestyle to update.
	 * @param lifestyle The updated lifestyle details.
	 * @return A success message along with an appropriate HTTP status.
	 * @throws RecordNotFoundException If the specified lifestyle is not found.
	 */
	
	@PutMapping("/updateByPatientId/{patientId}")
	public ResponseEntity<String> updateLifestyleByPatientId(@PathVariable int patientId,
	                                                        @RequestBody LifeStyle lifestyle) {
	    try {
	        logger.info("Received a PUT request to update lifestyle with patientId: {}", patientId);

	        // Call the service to update the lifestyle by patientId
	        lifestyleService.updateLifestyleByPatientId(patientId, lifestyle);

	        // Return a success response with appropriate message in the body
	        return new ResponseEntity<>("LifeStyle Updated Successfully", HttpStatus.OK);
	    } catch (RecordNotFoundException e) {
	        // Log the exception
	        logger.error("No lifestyle found for patientId: {}", patientId);

	        // Return a not found response with appropriate message in the body
	        return ResponseEntity
	                .status(HttpStatus.NOT_FOUND)
	                .body("No lifestyle found for patientId: " + patientId);
	    } catch (Exception e) {
	        // Log the exception
	        logger.error("An error occurred while updating lifestyle by patientId: {}", patientId, e);

	        // Return an error response with appropriate message in the body
	        return ResponseEntity
	                .status(HttpStatus.INTERNAL_SERVER_ERROR)
	                .body("Failed to update lifestyle for patientId: " + patientId);
	    }
	}


	/**
	 * Handles a DELETE request to delete a specific lifestyle by its serial number.
	 *
	 * @param lID The serial number of the lifestyle to delete.
	 * @return A success message along with an appropriate HTTP status.
	 * @throws RecordNotFoundException If the specified lifestyle is not found.
	 */
	@DeleteMapping("/deleteByPatientId/{patientId}")
	public ResponseEntity<String> deleteLifestyle(@PathVariable int patientId) {
	    try {
	        // Attempt to delete the lifestyle record by patientId
	        lifestyleService.deleteLifestyleByPatientId(patientId);
	        
	        // Return a success response with appropriate message in the body
	        return new ResponseEntity<>("LifeStyle Deleted Successfully", HttpStatus.OK);
	    } catch (RecordNotFoundException e) {
	        // Log the exception
	        logger.error("LifeStyle not found with patientId: {}", patientId);

	        // Return a not found response with appropriate message in the body
	        return new ResponseEntity<>("LifeStyle not found with patientId: " + patientId, HttpStatus.NOT_FOUND);
	    } catch (Exception e) {
	        // Log the exception
	        logger.error("An error occurred while deleting lifestyle with patientId: {}", patientId, e);

	        // Return an error response with appropriate message in the body
	        return new ResponseEntity<>("Failed to delete lifestyle with patientId: " + patientId, HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	}


}
